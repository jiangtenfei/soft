真机：还原三台虚拟机
[root@room9pc13 ~]# rht-vmctl reset classroom  
[root@room9pc13 ~]# rht-vmctl reset server
[root@room9pc13 ~]# rht-vmctl reset desktop   

########################################################

统计文件有多少行
[root@server

0 ~]# wc -l /etc/passwd
[root@server0 ~]# wc -l /etc/redhat-release 

 请计算Linux系统中一共有多少个用户？
[root@server0 ~]# wc -l /etc/passwd
 
 请计算Linux系统/etc/以tab结尾的文件有多少个？
[root@server0 ~]# find /etc/ -name "*tab" | wc -l

[root@server0 ~]# find /etc/ -name "*.conf" | wc -l

###################################################
扇区:512字节

• 识别硬盘 => 分区规划 => 格式化 => 挂载使用

   毛坯楼层=>打隔断=>装修 => 入驻


格式化：赋予一种规则，数据在空间存放的规则（文件系统）

###################################################
 分区规划 

分区模式：施工方案

    MBR/msdos：最大支持到2TB
       – 分区的类型：主分区   扩展分区   逻辑分区
       – 4个主分区,或者 3个主分区+1个扩展分区(n个逻辑分区)
       – 扩展分区空间不能直接使用


一、进行分区
1.查看当前系统识别的磁盘
[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda     253:0    0  10G  0 disk 
└─vda1 253:1    0  10G  0 part /
vdb     253:16   0  10G  0 disk
 
[root@server0 ~]# ls /dev/vdb

2.划分分区
[root@server0 ~]# fdisk  /dev/vdb
   n 创建新的分区----->回车----->回车---->回车----->在last结束时 +2G
   p 查看分区表
   n 创建新的分区----->回车----->回车---->回车----->在last结束时 +2G
   d 删除分区
   w 保存并退出

[root@server0 ~]# lsblk 
[root@server0 ~]# ls /dev/vdb[1-2]


二、格式化
[root@server0 ~]# mkfs.ext4 /dev/vdb1   #格式化文件系统为ext4
[root@server0 ~]# blkid /dev/vdb1       #查看文件系统类型

[root@server0 ~]# blkid /dev/vdb2      
[root@server0 ~]# mkfs.xfs /dev/vdb2   #格式化文件系统为xfs
[root@server0 ~]# blkid /dev/vdb2

  重复格式化
[root@server0 ~]# mkfs.xfs -f /dev/vdb1

三、挂载使用
[root@server0 ~]# mount /dev/vdb1 /part1
mount: 挂载点 /part1 不存在
[root@server0 ~]# mkdir /part1
[root@server0 ~]# mount /dev/vdb1 /part1

[root@server0 ~]# mkdir /part2
[root@server0 ~]# mount /dev/vdb2 /part2

查看当前正在挂载设备的使用情况

[root@server0 ~]# df -h

四、开机自动挂载 /etc/fstab
     
     – 设备路径        挂载点       类型      参数          备份标记      检测顺序
  
 补充：vim 命令模式 按 o 可以另起一行 进入插入模式

[root@server0 ~]# vim  /etc/fstab
 /dev/vdb1   /part1    ext4    defaults 0 0
 /dev/vdb2   /part2    xfs     defaults 0 0

[root@server0 ~]# df -h
[root@server0 ~]# umount /part1
[root@server0 ~]# umount /part2
[root@server0 ~]# df -h
[root@server0 ~]# mount -a
[root@server0 ~]# df -h
   检测/etc/fstab开机自动挂载配置文件,格式是否正确
   检测/etc/fstab中,书写完成,但当前没有挂载的设备,进行挂载

五、综合分区
  最终有3个主分区，分别为2G、2G、1G
  创建扩展分区
  两个逻辑分区，分别为1G、1G
[root@server0 ~]# fdisk  /dev/vdb
   p 查看分区表
   n 创建主分区----->回车----->回车---->回车----->在last结束时 +1G
   p 查看分区表
   n 创建扩展分区 
                   ----->回车---->起始回车----->结束回车  将所有空间给扩展分区
   p 查看分区表
   n 创建逻辑分区----->起始回车------>结束+1G
   n 创建逻辑分区----->起始回车------>结束+1G
   p 查看分区表
   w 保存并退出
[root@server0 ~]# partprobe  刷新所有分区 
[root@server0 ~]# lsblk
[root@server0 ~]# ls /dev/vdb[1-6]

   /dev/sda5: SCSI接口的第一块硬盘的第一个逻辑分区

####################################################
总结：
   1.查看所有的硬盘设备   lsblk
   2.进行分区        fdisk
   3.刷新分区        partprobe
   4.进行格式化     mkfs.ext4  mkfs.xfs
   5.查看是否有文件系统    blkid
   6.完成挂载        mount   
   7.书写/etc/fstab完成开机自动挂载
   8.进行mount -a测试
   9.查看是否挂载成功  df  -h

###################################################
添加一个80G新虚拟磁盘

[root@room9pc01 ~]# gos

[root@server0 ~]# lsblk
 
 vdc    253:32   0  80G  0 disk
 
综合分区：
   三个主分区，分别10G
   创建扩展分区
   两个逻辑分区，分别10G
[root@server0 ~]# fdisk  /dev/vdc  
   p 查看分区表
   n 创建主分区----->回车----->回车---->回车----->在last结束时 +10G
         连续创建3个10G主分区
      ......
   n 创建扩展分区 
                   ----->回车---->起始回车----->结束回车  将所有空间给扩展分区
   p 查看分区表
   n 创建逻辑分区----->起始回车------>结束+10G
   n 创建逻辑分区----->起始回车------>结束+10G
   p 查看分区表
   w 保存并退出
[root@server0 ~]# lsblk 

#######################################################
LVM逻辑卷的管理

   作用： 1.可以整合分散的空间   2.空间可以扩大

创建思路：

     零散空闲存储 ---->整合的虚拟磁盘 ---->虚拟的分区

     物理卷（PV）     卷组（VG）     逻辑卷（LV）

  将众多的 物理卷(PV)组成卷组(VG)，再从卷组(VG)划分出逻辑卷(LV）

   蒸馒头：
      面粉--------->大面团-------->小面团------->蒸------->吃

   房子：
      砖--------->大房子-------->打隔断-------->装修------->入住

####################################################
  
一、创建逻辑卷

1.直接创建卷组
  格式：vgcreate 卷组名   分区路径

[root@server0 ~]# vgcreate nsd /dev/vdc[1-2]
[root@server0 ~]# pvs   #显示物理卷信息
[root@server0 ~]# vgs   # 显示卷组信息

2.创建逻辑卷
  格式：lvcreate -L 大小    -n  逻辑卷名称     基于的卷组名

[root@server0 ~]# lvcreate -L 16G -n mylv  nsd
[root@server0 ~]# vgs
[root@server0 ~]# lvs

3.逻辑卷的使用
[root@server0 ~]# ls /dev/nsd/mylv         #查看逻辑卷设备
[root@server0 ~]# ls -l /dev/nsd/mylv
[root@server0 ~]# mkfs.ext4 /dev/nsd/mylv   #格式化
[root@server0 ~]# blkid  /dev/nsd/mylv

[root@server0 ~]# vim  /etc/fstab 
/dev/nsd/mylv  /lvm   ext4   defaults   0  0

[root@server0 ~]# mkdir /lvm
[root@server0 ~]# mount -a
[root@server0 ~]# df -h

####################################################
逻辑卷的扩展,支持线上操作

一、卷组有足够的剩余空间

1.直接扩展逻辑卷空间
[root@server0 ~]# vgs
[root@server0 ~]# lvs
[root@server0 ~]# lvextend -L 18G /dev/nsd/mylv 
[root@server0 ~]# lvs

2.扩展文件系统的大小（刷新文件系统的大小）
    扩展ext4文件系统：resize2fs
    扩展xfs文件系统：xfs_growfs

[root@server0 ~]# df -h
[root@server0 ~]# resize2fs /dev/nsd/mylv 
[root@server0 ~]# df -h

二、卷组没有足够的剩余空间

1.扩展卷组空间
[root@server0 ~]# vgextend nsd /dev/vdc3
[root@server0 ~]# vgs

2.直接扩展逻辑卷空间
[root@server0 ~]# lvs
[root@server0 ~]# lvextend -L 25G /dev/nsd/mylv 
[root@server0 ~]# lvs

3.扩展文件系统的大小（刷新文件系统的大小）

[root@server0 ~]# df -h
[root@server0 ~]# resize2fs /dev/nsd/mylv 
[root@server0 ~]# df -h

#######################################################
逻辑卷补充内容：
  ext4：支持缩减
   xfs：不支持缩减

一、逻辑卷的缩减，不支持线上操作
  1.文件系统的缩减
[root@server0 ~]# resize2fs /dev/nsd/mylv 10G
[root@server0 ~]# umount /lvm
[root@server0 ~]# resize2fs /dev/nsd/mylv 10G
resize2fs 1.42.9 (28-Dec-2013)
请先运行 'e2fsck -f /dev/nsd/mylv'.

[root@server0 ~]# e2fsck -f /dev/nsd/mylv
[root@server0 ~]# resize2fs /dev/nsd/mylv 10G

  2.空间的缩减
[root@server0 ~]# lvreduce -L 10G /dev/nsd/mylv 
  WARNING: Reducing active logical volume to 10.00 GiB
  THIS MAY DESTROY YOUR DATA (filesystem etc.)
Do you really want to reduce mylv? [y/n]: y
  Reducing logical volume mylv to 10.00 GiB
  Logical volume mylv successfully resized
[root@server0 ~]# lvs

###################################################
  PE：卷组划分空间的单位

[root@server0 ~]# vgdisplay nsd   #显示nsd卷组详细信息

  PE Size               4.00 MiB


  请创建一个大小为250M逻辑卷为lvtest01

[root@server0 ~]# vgchange -s 1M nsd

[root@server0 ~]# vgdisplay 

[root@server0 ~]# lvcreate -L 250M -n lvtest01 nsd

[root@server0 ~]# lvs

[root@server0 ~]# vgchange -s 16M nsd

[root@server0 ~]# lvcreate -l 50 -n lvtest02 nsd

  -l :指定PE个数

##################################################
  逻辑卷的删除
    删除的顺序：向删除逻辑卷,在删除卷组，最后删除物理卷
   

[root@server0 ~]# lvremove /dev/nsd/mylv 
  Logical volume nsd/mylv contains a filesystem in use.
[root@server0 ~]# umount /lvm

[root@server0 ~]# lvremove /dev/nsd/mylv 
Do you really want to remove active logical volume m


















2222222222222222222222222222222222222222222222222222222222



真机：还原三台虚拟机
[root@room9pc13 ~]# rht-vmctl reset classroom  
[root@room9pc13 ~]# rht-vmctl reset server
[root@room9pc13 ~]# rht-vmctl reset desktop   

########################################################
Shell脚本
    
    脚本：一个可以执行的文件，可以实现某种功能

[root@server0 ~]# vim  /root/hello.sh
echo hello world

[root@server0 ~]# chmod  +x  /root/hello.sh
 
[root@server0 ~]# /root/hello.sh    #绝对路径执行



###################################################

规范Shell脚本的一般组成
 • #! 环境声明 
 • # 注释文本
 • 可执行代码

[root@server0 ~]# vim  /root/system.sh 
 #!/bin/bash
 cat  /etc/redhat-release
 uname -r
 hostname
 ifconfig | head -2

 [root@server0 ~]# chmod +x /root/system.sh 

 [root@server0 ~]# /root/system.sh 

#######################################################

管道传递
• 使用 | 管道操作
– 将前一条命令的标准输出交给后一条命令处理


重定向输出
      > : 正确信息的重定向，只收集前面命令的正确输出
     2>: 错误信息的重定向，只收集前面命令的错误输出
     &>:正确与错误信息的重定向，收集前面命令的正确与错误输出

[root@server0 ~]# echo 123 > /opt/1.txt

[root@server0 ~]# cat /opt/1.txt /etc

[root@server0 ~]# cat /opt/1.txt /etc  >  /mnt/a.txt
[root@server0 ~]# cat /mnt/a.txt 

[root@server0 ~]# cat /opt/1.txt /etc  2>  /mnt/a.txt
[root@server0 ~]# cat /mnt/a.txt 

[root@server0 ~]# cat /opt/1.txt /etc  &> /mnt/a.txt
[root@server0 ~]# cat /mnt/a.txt

########################################################
  用于收集不要的命令输出，黑洞设备：/dev/null
 
[root@server0 ~]# vim  /root/user.sh

 #!/bin/bash
 useradd  nsd06  &>  /dev/null
 echo  用户nsd06创建成功
 echo  123  |  passwd  --stdin  nsd06  &> /dev/null
 echo  用户nsd06密码设置成功

[root@server0 ~]# chmod +x /root/user.sh

[root@server0 ~]# /root/user.sh


#################################################

 为了增加脚本灵活度，脚本适应多变的环境，所以使用变量

  变量：会变化的量， 相当于一个容器，存放可以变化的值
            以不变的名称，存放可以变化的值
  $变量名：调用变量储存的值

 [root@server0 ~]# vim /root/user.sh
 #!/bin/bash
 a=nsd10
 useradd  $a  &>  /dev/null
 echo  用户$a创建成功
 echo  123  |  passwd --stdin  $a  &> /dev/null
 echo  用户$a密码设置成功

 [root@server0 ~]#  chmod +x  /root/user.sh
 [root@server0 ~]#  /root/user.sh



########################################################
  产生一个交互式问答，降低脚本使用难度，脚本更加的灵活

 read : 产生一个交互式问答, 
  可以记录用户在键盘的输入，并且会将用户在键盘的输入，赋值给变量储存


[root@server0 ~]# vim  /root/user.sh
 #!/bin/bash
 read -p  '请输入您要创建的用户名:'     a
 useradd  $a   &> /dev/null
 echo  用户$a创建成功
 echo  123  |  passwd  --stdin  $a  &> /dev/null
 echo  用户$a密码设置成功

######################################################

变量的定义/引用

• 设置变量时的注意事项
– 等号两边不要有空格
– 变量名只能由字母/数字/下划线组成,区分大小写
– 变量名不能以数字开头,不要使用关键字和特殊字符
– 若指定的变量名已存在,相当于为此变量重新赋值


• 基本格式
– 引用变量值:$变量名
– 查看变量值:echo  $变量名、echo  ${变量名}

[root@server0 ~]# a=rhel
[root@server0 ~]# echo $a

[root@server0 ~]# echo $a7

[root@server0 ~]# echo ${a}7
补充：
  $[ ] :代表运算

[root@server0 ~]# echo $[1+1]
[root@server0 ~]# echo $[4+1]
[root@server0 ~]# echo $[10/3]
[root@server0 ~]# echo $[10%3]      #取余数运算
[root@server0 ~]# echo $[4*2]

 余数运算： 余数一定小于除数


  $( )与反撇号  ` ` ： 将命令的输出结果，作为命令的参数
[root@server0 opt]# date
[root@server0 opt]# date +%F
[root@server0 opt]# cd /opt

[root@server0 opt]# mkdir  dir-$(date +%F)
[root@server0 opt]# ls

[root@server0 opt]# mkdir $(hostname)-$(date +%F)
[root@server0 opt]# ls

   ' ' :取消所有shell中特殊字符意义，原样输出
##################################################
系统定义，用户直接使用

  储存随机数的变量：RANDOM

  请显示 10以内的随机数字 [0-9]?
  余数运算： 余数一定小于除数

[root@server0 /]# echo $[$RANDOM%10]

[root@server0 /]# echo $[$RANDOM%100]

###################################################
环境变量，由系统定义完成

   USER=当前登陆的用户名

[root@server0 /]# echo $USER
root
[root@server0 /]# su - nsd01
[nsd01@server0 ~]$ echo $USER
nsd01
[nsd01@server0 ~]$ exit
logout
[root@server0 /]# 

位置变量
• 在执行脚本时提供的命令行参数
– 表示为 $n,n为序号
– $1、$2、.. .. 

   read -p  :  可以在脚本运行的时候，从命令行传递变量的值

     位置变量   :  可以在脚本运行的时候，从命令行传递变量的值（非交互）

[root@server0 /]# vim /root/1.sh
  #!/bin/bash
  echo $1
  echo $2
  echo $3

[root@server0 /]#  /root/1.sh  test01  harry   180

[root@server0 /]# vim /root/cat.sh 
  #!/bin/bash
  cat -n $1  | head -$2

[root@server0 /]# /root/cat.sh /etc/passwd  2


预定义变量
• 用来保存脚本程序的执行信息
– 直接使用这些变量
– 不能直接为这些变量赋值

	$#  已加载的位置变量的个数
	$*  所有位置变量的值
	$?  程序退出后的状态值,0表示正常,其他值异常

 [root@server0 /]# vim /root/1.sh 
  #!/bin/bash
  echo $1
  echo $2
  echo $3
  echo $#            #统计位置变量的个数
  echo $*            #输出所有位置变量的值

[root@server0 /]# /root/1.sh haha xixi hehe lele
 haha
 xixi
 hehe
  4
 haha xixi hehe lele

[root@server0 /]# useradd natasha
[root@server0 /]# echo $?
0
[root@server0 /]# id natasha
uid=1020(natasha) gid=1020(natasha) 组=1020(natasha)
[root@server0 /]# echo $?
0
[root@server0 /]# id haxi
id: haxi: no such user
[root@server0 /]# echo $?
1
[root@server0 /]# useradd natasha
useradd：用户“natasha”已存在
[root@server0 /]# echo $?
9
[root@server0 /]# 

#####################################################
条件测试

  [  测试表达式  ]      #每一部分都要有空格

 • 检查文件状态
	-e：判断文档是否存在，存在为真
	-d：存在并且为目录为真
	-f：存在并且为文件为真
	-r：存在并且对其有读取权限为真
	-w：存在并且对其有写入权限为真
	-x：存在并且对其有执行权限为真


[root@server0 /]# [ -e /etc ]
[root@server0 /]# echo $?
0
[root@server0 /]# [ -d /etc/passwd ]
[root@server0 /]# echo $?
1
[root@server0 /]# [ -f /etc/passwd ]
[root@server0 /]# echo $?
0
[root@server0 /]# [ -f /etc/ ]
[root@server0 /]# echo $?
1
[root@server0 /]# [ -e /abcd ]
[root@server0 /]# echo $?



• 比较整数大小( 带e字母的都有等于二字)
	-gt:大于
	-ge:大于等于   
	-eq:等于         
	-ne:不等于
	-lt:小于
	-le:小于等于
[root@server0 /]# [ 1 -eq  1 ]
[root@server0 /]# echo $?

[root@server0 /]# [ 1 -gt 2 ]
[root@server0 /]# echo $?

[root@server0 /]# [ 1 -gt 1 ]
[root@server0 /]# echo $?

[root@server0 /]# [ 1 -ge 1 ]
[root@server0 /]# echo $?

• 字符串比对
   ==: 字符串相等为真
   !=:字符串不相等为真

[root@server0 /]# [  root   ==  student  ]
[root@server0 /]# echo $?

[root@server0 /]# [  root   ==  root  ]
[root@server0 /]# echo $?

[root@server0 /]# [  $USER  ==  root  ]
[root@server0 /]# echo $?

[root@server0 /]# [  student  != root  ]
[root@server0 /]# echo $?

###################################################
if选择结构

if双分支

    if  [条件测试];then
               执行的语句01
     else
               执行的语句02
    fi

案例： 
          用户输入一个IP地址，判断本机是否可以与这个IP地址通信
          如果 可以通信，则输出   可以通信
          如果 不可以通信，则输出  不可以通信   
   
[root@server0 /]# vim  /root/ip.sh 
    #!/bin/bash
    read  -p  '请输入您要测试的IP地址:'     ip
    ping  -c  2  $ip  &>  /dev/null
        
    if  [  $?  -eq  0 ];then
          echo $ip 可以通信
    else
          echo $ip 不可以通信   
    fi

案例：
       用户输入一个0到9之间数字，计算机随机产生一个0到9之间数字
       如果 用户输入数字与计算机随机产生数字相等，则输出 您猜对了
       如果 用户输入数字与计算机随机产生数字不相等，则输出 您猜错了

[root@server0 /]# vim /root/num.sh
    #!/bin/bash
    read  -p  '请输入一个0到9之间数字:'     num1
    num2=$[$RANDOM%10]     #随机产生一个0到9之间数字,赋值给num2
     
     if  [  $num2  -eq  $num1  ];then
            echo 您猜对了
       else
            echo 您猜错了
            echo 正确的数字为 $num2
     fi

#####################################################
if多分支处理

  if [条件测试1];then
     命令序列xx

  elif [条件测试2];then
     命令序列yy

  elif [条件测试3];then
     命令序列aa

  else
      命令序列zz
  fi

 案例：
         用户输入成绩：
            如果成绩大于等于90，则输出 优秀
            如果成绩大于等于80，则输出 良好
            如果成绩大于等于70，则输出 合格
            如果成绩大于等于60，则输出 仍需努力
            以上条件均不满足，则输出  在牛的肖邦，也弹不出哥的悲伤

[root@server0 /]# vim  /root/if03.sh
	#!/bin/bash
	read  -p  '请输入您的成绩:'      num
	if [  $num  -ge  90  ];then
	  echo  优秀
	elif  [  $num  -ge  80  ];then
	  echo  良好
	elif  [  $num  -ge  70  ];then
	  echo  合格
	elif  [  $num  -ge  60  ];then
	  echo  仍需努力
	else
	  echo  在牛的肖邦，也弹不出哥的悲伤
	fi

################################################
 
案例：
       用户输入一个0到9之间数字，计算机随机产生一个0到9之间数字
       如果 用户输入数字与计算机随机产生数字相等，则输出 您猜对了

       如果 用户输入数字比计算机随机产生数字大，则输出 您猜大了

       如果 用户输入数字比计算机随机产生数na
字小，则输出 您猜小了

[root@server0 /]# vim /root/num.sh
    #!/bin/bash
    read  -p  '请输入一个0到9之间数字:'     num1
    num2=$[$RANDOM%10]    
     
     if  [  $num2  -eq  $num1  ];then
            echo 您猜对了
     elif  [  $num1  -gt  $num2  ];then
             echo 您猜大了
             echo 正确的数字为 $num2 
     else
             echo 您猜小了
             echo 正确的数字为 $num2 
     fi


案例：
   在上个案例的基础上，让用户可以猜三次

 #!/bin/bash
 num2=$[$RANDOM%10]
 for  i   in   {1..5}
 do
 read  -p  '请输入一个0到9之间数字:'     num1

 if  [  $num2  -eq  $num1  ];then
       echo 您猜对了
       exit
 elif  [ $num1 -gt $num2 ];then
       echo 您猜大了
 else
       echo 您猜小了
 fi
 done




造数工具  {  起始..结尾 }


for循环结构

• 给定一批对象,反复执行类似的操作

  for 变量名 in 值列表
  do
    命令序列
  done


[root@server0 /]# vim /root/for.sh
 #!/bin/bash
 for  a   in  zhangsan  lisi   wangwu 
 do
   useradd  $a  &>  /dev/null
   echo   $a创建成功
 done


######################################################

 循环内容可以于循环的列表值无关

[root@server0 /]# cat /root/for2.sh
#!/bin/bash
for i in 1 2 3
do
  echo hello
done





















33333333333333333333333333333333333333333333333333333333333333333


真机：还原三台虚拟机
[root@room9pc13 ~]# rht-vmctl reset classroom  
[root@room9pc13 ~]# rht-vmctl reset server
[root@room9pc13 ~]# rht-vmctl reset desktop   

########################################################

案例4:编写一个判断脚本
在 server0 上创建 /root/foo.sh 脚本
1)当运行/root/foo.sh redhat,输出为fedora
2)当运行/root/foo.sh fedora,输出为redhat
3)当没有任何参数或者参数不是 redhat 或者
fedora时,其错误输出产生以下信息:   /root/foo.sh redhat|fedora

[root@server0 ~]# vim /root/foo.sh 
 #!/bin/bash
 if [  $#  -eq  0  ];then
   echo  '/root/foo.sh  redhat|fedora'  >&2 
     #将正确输出变成错误输出
     exit  3
 elif [  $1  ==  redhat  ];then
   echo fedora

 elif  [  $1  ==  fedora  ];then
   echo redhat

 else
   echo  '/root/foo.sh  redhat|fedora'  >&2
     exit 4
 fi

###################################################
案例5:编写一个批量添加用户脚本

在 server0 上创建 /root/batchusers 脚本
1)此脚本要求提供用户名列表文件作为参数
2)如果没有提供参数,此脚本应该给出提示 
Usage: /root/batchusers,退出并返回相应值
3)如果提供一个不存在的文件,此脚本应该给出提
示 Input file not found,退出并返回相应值
4)新用户的登录Shell为 /bin/false,无需设置密码
5)用户列表测试文件:
 http://classroom.example.com/pub/materials/userlist


[root@server0 /]# vim  /root/userlist 
zhangsan
lisi
wangwu 
dc
tc

[root@server0 /]# vim  /root/batchusers
 #!/bin/bash
 for i  in  `cat  /root/userlist`
 do
  useradd $i
  echo $i创建成功
 done


[root@server0 /]# vim  /root/batchusers
#!/bin/bash
if  [ -f $1 ];then
for i  in  `cat  $1`
do
 useradd $i 2> /dev/null
 echo $i创建成功
done
else
   echo Input file not found  >&2
   exit 2
fi



[root@server0 /]# vim  /root/batchusers
	#!/bin/bash
	if [ $# -eq 0 ];then        #判断是否输入参数
		 echo 'Usage: /root/batchusers' >&2
		 exit 3

	elif  [ -f $1 ];then        #判断文件是否存在

		for i  in  `cat  $1`
		do
		 useradd -s /bin/false $i 2> /dev/null
		 echo $i创建成功
		done

	else
		   echo Input file not found   >&2
		   exit 2
	fi

######################################################

系统安全保护

SELinux安全机制

• Security-Enhanced Linux
– 美国NSA国家安全局主导开发,一套增强Linux系统安
全的强制访问控制体系


• SELinux的运行模式
– enforcing(强制)、permissive(宽松)
– disabled(彻底禁用)

–  变成disabled(彻底禁用)状态，都需要重起机器


• 切换运行模式
– 临时切换:setenforce 1|0
– 固定配置:/etc/selinux/config 文件


虚拟机Server
[root@server0 /]# getenforce       #查看当前的状态
Enforcing
[root@server0 /]# setenforce 0     #当前修改为Permissive
[root@server0 /]# getenforce 
Permissive
[root@server0 /]# vim /etc/selinux/config#每次开机状态配置文件
SELINUX=permissive

虚拟机Desktop
[root@desktop0 /]# getenforce 
Enforcing
[root@desktop0 /]# setenforce 0
[root@desktop0 /]# getenforce 
Permissive
[root@desktop0 /]# vim /etc/selinux/config
SELINUX=permissive
#####################################################

配置用户环境,永久别名的设置

• 影响指定用户的 bash 解释环境
– ~/.bashrc,每次开启 bash 终端时生效


• 影响所有用户的 bash 解释环境
– /etc/bashrc,每次开启 bash 终端时生效

虚拟机server：

[root@server0 /]# vim /root/.bashrc   #针对于root生效
alias hello='echo hello'

[root@server0 /]# vim /home/student/.bashrc  #针对于student
alias hi='echo hi'

[root@server0 /]# vim /etc/bashrc   #针对于所有用户
alias haxi='echo hahaxixi'

再开一个新的终端验证
root用户能够执行：hello、haxi

student用户能够执行：hi、haxi

######################################################
配置IPv6地址

     IP地址：唯一标识网络中一台主机

 IPv4地址:  32个二进制组成   以点分隔4部分  最终用4个十进制数表示


 IPv6地址:  128个二进制组成  以 冒号 分隔8部分  最终用4个16进制数表示

   每段内连续的前置 0 可省略、连续的多个 : 可简化为 ::




为两个虚拟机的接口 eth0 配置下列 IPv6 地址
– server0 上的地址应该是 2003:ac18::305/64

虚拟机Server0
[root@server0 ~]# nmcli connection modify 'System eth0' ipv6.method manual ipv6.addresses 2003:ac18::305/64 connection.autoconnect yes

[root@server0 ~]# nmcli connection up 'System eth0'

[root@server0 ~]# ifconfig | less

[root@server0 ~]# ping6 2003:ac18::305

######################################################
配置聚合连接(链路聚合  网卡绑定)

      网卡设备热备份       

• team,聚合连接(也称为链路聚合)
– 由多块网卡(team-slave)一起组建而成的虚拟网卡,即“组队”

– 作用:热备份(activebackup)连接冗余

  
1.创建虚拟网卡,参考 man teamd.conf  # /example  全文搜索example

# nmcli  connection  add  type  team     
 con-name  team0  ifname  team0  autoconnect  yes          
 config  '{"runner": {"name": "activebackup"}}'

# nmcli  connection 添加    类型    组队
  配置文件的名字为  team0  ifconfig显示名字为  team0  每次开机自启动
  工作模式配置  热备份方式

# ifconfig  查看team0网卡

#  nmcli connection delete team0   #删除

2.添加成员

# nmcli connection add type team-slave 
con-name team0-1 ifname  eth1   master team0

# nmcli connection add  type team-slave 
con-name team0-2 ifname  eth2  master team0

# nmcli connection 添加   类型    组队-奴隶
  配置文件名 team0-1  网卡名为 eth2  主设备为  team0

删除的配置
# nmcli connection delete team0-1  
# nmcli connection delete team0-2


3.配置IP地址
# nmcli connection modify team0          
  ipv4.method manual ipv4.addresses 192.168.1.1/24     
  connection.autoconnect  yes

4.激活所有配置

[root@server0 ~]# nmcli connection up team0
[root@server0 ~]# nmcli connection up team0-1
[root@server0 ~]# nmcli connection up team0-2

[root@server0 ~]# teamdctl team0 state   #查看team0信息
 
#####################################################

[root@server0 ~]# ifconfig  eth1   down    #禁用网卡
[root@server0 ~]# teamdctl  team0  state

####################################################
搭建基本Web服务

服务端虚拟机Server0：

1.安装一个httpd软件    Apache(httpd)  
[root@server0 ~]# yum  -y  install  httpd

2.重起服务即可
[root@server0 ~]# systemctl  restart httpd     

3.书写一个页面文件
   默认存放文件文件的路径：/var/www/html
   默认文件文件的名字： index.html
  html网页语言

[root@server0 ~]# vim /var/www/html/index.html
<h1><font color=red><marquee>NSD1805
最大字体   字体颜色          滚动


客户端：虚拟机Server0
[root@server0 ~]# firefox   172.25.0.11

#################################################

虚拟机Server0：搭建基本FTP服务
1.安装一个vsftpd软件
[root@server0 ~]# yum -y install vsftpd

2.重起服务
[root@server0 ~]# systemctl  restart  vsftpd

3.测试：
[root@server0 ~]# firefox ftp://172.25.0.11

 默认vsftpd共享数据的路径：/var/ftp

#####################################################
防火墙
    作用：隔离  过滤所有入站请求，允许出站

    硬件防火墙

    软件防火墙

RHEL7的防火墙体系
• 系统服务:firewalld
• 管理工具:firewall-cmd（命令）、firewall-config（图形）

• 根据所在的网络场所区分,预设保护规则集 zone 区域
  – public:仅允许访问本机的sshd、ping、dhcp服务
  – trusted:允许任何访问
  – block:阻塞任何来访请求，明确拒绝
  – drop:丢弃任何来访的数据包，直接丢弃，节省资源

• 配置规则的位置
  – 运行时(runtime)
  – 永久(permanent


######################################################












还原三台虚拟机器
[root@room9pc01 ~]# rht-vmctl reset classroom
[root@room9pc01 ~]# rht-vmctl reset server
[root@room9pc01 ~]# rht-vmctl reset desktop

######################################################

 防火墙策略管理

 基本Web服务,FTP服务

1.服务端虚拟机Server，安装可以提供Web服务与FTP服务软件
 # yum -y  install  httpd  vsftpd

2.虚拟机Server操作，启动httpd与vsftpd服务，设置为开机自起服务
 # systemctl  restart  httpd   #重起服务
 # systemctl  enable  httpd    #设置开机自起服务
 # systemctl  restart  vsftpd  #重起服务
 # systemctl  enable  vsftpd   #设置开机自起服务

3.虚拟机Server操作,书写页面文件
 # echo '<h1>NSD1803'  >  /var/www/html/index.html

4.虚拟机Server操作,访问测试
 # firefox  172.25.0.11
 # firefox  ftp://172.25.0.11
#####################################################
防火墙策略管理

   作用：隔离，过滤入站请求，允许出站

RHEL7的防火墙体系
• 系统服务:firewalld
• 管理工具:firewall-cmd、firewall-config（图形工具）

  匹配规则的原则： 匹配及停止

预设安全区域
• 根据所在的网络场所区分,预设保护规则集
  – public:仅允许访问本机的sshd、DHCP、ping少数几个服务
  – trusted:允许任何访问
  – block:阻塞任何来访请求，明确拒绝
  – drop:丢弃任何来访的数据包，节省资源



 防火墙决定，客户端请求进入某个区域的规则：
  1.查看客户端请求中源IP地址，再看所以有区域中，哪一个区域有该源IP地址的规则，则进入该区域

  2.进入默认区域，public

#####################################################
互联网常见的服务协议
  http  :超文本传输协议         80 
  FTP   ：文件传输协议           21
  https ：安全的超文本传输协议     443
  DNS    :域名解析协议           53
  telnet :远程管理协议            23
  smtp   ：邮件协议，用户发邮件协议   25
  pop3   ：邮件协议，用户收邮件协议   110
  tftp   ：简单文件传输协议              69


默认区域服务的添加
虚拟机Server
# firewall-cmd --get-default-zone           #查看默认区域
# firewall-cmd --zone=public  --list-all    #查看区域规则
# firewall-cmd --zone=public  --add-service=http  #添加服务
# firewall-cmd --zone=public  --add-service=ftp
# firewall-cmd --zone=public  --list-all 

虚拟机Desktop
# firefox 172.25.0.11        #可以访问
# firefox ftp://172.25.0.11  #可以访问

######################################################
 策略的永久配置

– 永久(permanent)

虚拟机Server
# firewall-cmd --reload      #重新加载防火墙配置，模拟重起机器
# firewall-cmd --zone=public --list-all 

# firewall-cmd --permanent --zone=public --add-service=http
# firewall-cmd --permanent --zone=public --add-service=ftp

# firewall-cmd --zone=public --list-all 


# firewall-cmd --reload 
# firewall-cmd --zone=public --list-all 

#####################################################
添加源IP的规则设置

虚拟机Server
 # firewall-cmd --zone=block --list-all
 # firewall-cmd --zone=block    --add-source=172.25.0.10
 # firewall-cmd --zone=block --list-all 

虚拟机Desktop
 # ping -c 2 172.25.0.11        #失败
 # firefox   172.25.0.11        #失败
 # firefox   ftp://172.25.0.11  #失败

真机访问
 # ping -c 2 172.25.0.11        #成功
 # firefox   172.25.0.11        #成功
 # firefox   ftp://172.25.0.11  #成功
#####################################################
工作时防火墙，设置的方式
 
  严格：默认区域为drop，把允许的IP单独放入trusted
  宽松：默认区域为trusted，把拒绝的IP单独放入drop
#####################################################
  端口：编号，标识作用，标识每个服务

实现本机的端口映射
• 本地应用的端口重定向(端口1 --> 端口2)
– 从客户机访问 端口1 的请求,自动映射到本机 端口2
– 比如,访问以下两个地址可以看到相同的页面:

  客户端desktop-----》172.25.0.11:5423-----》服务端Server

  服务端Server-----172.25.0.11:5423 移交 -----172.25.0.11:80

虚拟机Server
# firewall-cmd --reload 
虚拟机Desktop
# firefox 172.25.0.11  #可以访问
# firefox 172.25.0.11:5423  #不可以访问

虚拟机Server
# firewall-cmd --permanent 
--zone=public 
--add-forward-port=port=5423:proto=tcp:toport=80
  #添加  -  转发  -  端口   =   将端口5423     协议为tcp  转发到80

# firewall-cmd --reload 
# firewall-cmd --zone=public --list-all 
虚拟机Desktop
# firefox 172.25.0.11:5423  #可以访问
###################################################

 配置聚合连接 (网卡绑定、链路聚合)

             eth1             eth2

                              虚拟网卡 team（组队）
 

1.创建 虚拟网卡      man teamd.conf  #查看帮助信息

# nmcli  connection  add  type  team        
 con-name  team0   ifname  team0  autoconnect   yes        
 config   '{"runner": {"name": "activebackup"}}'

# ifconfig   #查看是否有team0网卡

# nmcli  connection 添加   类型为   team（绑定类型） 
   配置文件名为  team0   ifconfig显示网卡名为   team0  每次开机自起
   配置网卡绑定工作模式    热备份方式

#  如果敲错误 
# nmcli  connection  delete team0

2.添加成员（添加奴隶）
# nmcli connection add  type team-slave con-name team0-1 ifname eth1   master  team0

# nmcli connection add   type team-slave con-name team0-2 ifname eth2   master  team0

# nmcli connection 添加   类型为  team-slave 配置文件名  team0-1
  网卡为  eth1   添加到team0中

#如果敲错误   nmcli connection delete  team0-1

3.配置team0的IP地址
# nmcli connection modify team0 ipv4.method manual 
  ipv4.addresses 192.168.1.1/24 connection.autoconnect yes

4.激活所有配置
# nmcli connection up team0
# nmcli connection up team0-1
# nmcli connection up team0-2
 

如果激活失败
  # nmcli connection delete team0
  # nmcli connection delete team0-1
  # nmcli connection delete team0-2
##################################################### 

终极验证:
[root@server0 ~]# teamdctl team0 state  #查看team0详细信息

[root@server0 ~]# ifconfig eth1 down    #禁用网卡

[root@server0 ~]# teamdctl team0 state

####################################################









44444444444444444444444444444444444444444444444444444444


还原三台虚拟机器
[root@room9pc01 ~]# rht-vmctl reset classroom
[root@room9pc01 ~]# rht-vmctl reset server
[root@room9pc01 ~]# rht-vmctl reset desktop

######################################################
修改防火墙的默认区域为trusted

虚拟机Server
[root@server0 ~]# firewall-cmd --set-default-zone=trusted 

虚拟机desktop
[root@desktop0 ~]# firewall-cmd --set-default-zone=trusted

#######################################################

Samba服务基础
 配置SMB共享，跨平台的共享，Windows与Linux的共享

• Samba 软件项目
– 用途:为客户机提供共享使用的文件夹
– 协议:SMB(TCP 139)、CIFS(TCP 445)

• 所需软件包:samba
• 系统服务:smb

Samba共享帐号：默认情况下，访问Samba共享必须通过用户验证
                         专门用于访问Samba共享时验证的用户与密码
                         与系统用户为同一个用户，但是密码时samba独立密码
 • 使用 pdbedit 管理工具
 – 添加用户:pdbedit -a 用户名
 – 查询用户:pdbedit -L [用户名]
 – 删除用户:pdbedit -x 用户名  


• 修改 /etc/samba/smb.conf
[自定共享名]

path = 文件夹绝对路径
; public = no|yes //默认no
; browseable = yes|no //默认yes
; read only = yes|no //默认yes
; write list = 用户1 .. .. //默认无
; valid users = 用户1 .. .. //默认任何用户
; hosts allow = 客户机地址 .. ..
; hosts deny = 客户机地址 .. ..

          
服务端，虚拟机Server：
1.安装可以提供smb共享功能的软件
[root@server0 ~]# yum -y install samba

2.建立Samba共享验证的用户
[root@server0 ~]# useradd harry
[root@server0 ~]# useradd kenji
[root@server0 ~]# useradd chihiro

[root@server0 ~]# pdbedit -a harry   #添加为Samba共享帐号
[root@server0 ~]# pdbedit -a kenji   #添加为Samba共享帐号
[root@server0 ~]# pdbedit -a chihiro #添加为Samba共享帐号

[root@server0 ~]# pdbedit  -L       #查看所有Samba共享帐号

3.创建共享目录与文件
[root@server0 ~]# mkdir /common
[root@server0 ~]# ls /
[root@server0 ~]# ls /common/
[root@server0 ~]# echo 123 > /common/123.txt
[root@server0 ~]# ls /common/

4.修改配置/etc/samba/smb.conf
 vim 末行模式   ：set  nu    #添加行号
          命令模式    G  到全文的最后
[global]
   89行  workgroup = STAFF       #指定工作组名

[common]                      #指定共享名
         path = /common       #指定共享文件夹的实际绝对路径

5.重起smb服务，刷新配置

[root@server0 ~]# systemctl restart smb   #重起服务
[root@server0 ~]# systemctl enable smb    #设置为开机自起

6.服务端,虚拟机Server：
  – 需要加 -P 选项才能实现永久设置
 SELinux策略：布尔值（所服务功能的开关）

1. 查看samba 布尔值
[root@server0 ~]# getsebool -a  | grep samba  

2.修改SELinux策略的布尔值
[root@server0 ~]# setsebool samba_export_all_ro on

3. 查看samba 布尔值
[root@server0 ~]# getsebool -a  | grep samba


客户端虚拟机Desktop：
 1.安装客户端软件，访问samba共享
 [root@desktop0 ~]# yum -y install samba-client

 2. 查看服务端samba共享，目的看 共享名
 [root@desktop0 ~]# smbclient -L //172.25.0.11
  Enter root's password:   #直接敲回车
	Sharename      
	common 

 3.以harry身份，访问服务端samba共享
 [root@desktop0 ~]# smbclient -U harry //172.25.0.11/common
  Enter harry's password:   #输入密码
  Domain=[STAFF] OS=[Unix] Server=[Samba 4.1.1]
  smb: \> 

####################################################
 客户端虚拟机desktop
  使用 mount 挂载访问

• 所需软件包:cifs-utils    #支持cifs协议

 # yum -y install cifs-utils
 # mkdir /mnt/samba

 # mount -o user=harry,pass=123   //172.25.0.11/common 
   /mnt/samba/

 # df  -h

开机自动挂载

   _netdev : 网络设备
                     先启动网络服务，具备网络参数后，再进行挂载

[root@desktop0 ~]# yum -y install cifs-utils
[root@desktop0 ~]# mkdir  /mnt/samba
[root@desktop0 ~]# vim  /etc/fstab 

 //172.25.0.11/common  /mnt/samba  cifs
 defaults,user=harry,pass=123,_netdev  0  0

[root@desktop0 ~]# mount  -a
[root@desktop0 ~]# df  -h       #查看是否挂载成功

######################################################
读写的Samba共享

服务端虚拟机Server：
1.部署共享
[root@server0 ~]# mkdir  /devops
[root@server0 ~]# echo nsd > /devops/test.txt
[root@server0 ~]# ls /devops

[root@server0 ~]# vim /etc/samba/smb.conf  #修改配置文件
  # 追加写入
 [devops]                       #共享名
   path = /devops               #路径为/devops
   write list = chihiro         #允许chihiro用户可写

[root@server0 ~]# systemctl restart smb

2.修改SELinux策略
[root@server0 ~]# getsebool -a | grep samba
[root@server0 ~]# setsebool samba_export_all_rw on
[root@server0 ~]# getsebool -a | grep samba

3.用户本身的本地权限
[root@server0 ~]# setfacl -m u:chihiro:rwx /devops
[root@server0 ~]# getfacl /devops
[root@server0 ~]# ls -l /devops

客户端虚拟机desktop
1.实现开机自动挂载
[root@desktop0 ~]# mkdir /mnt/pub
[root@desktop0 ~]# vim  /etc/fstab
 
  //172.25.0.11/devops  /mnt/pub    cifs                  
  defaults,user=chihiro,pass=123,_netdev  0 0

[root@desktop0 ~]# mount -a
[root@desktop0 ~]# df -h


######################################################
总结:客户端访问服务端资源

        1.服务本身的访问控制
        2.本的目录的权限
        3.防火墙
    4.SELinux

#####################################################
 multiuser机制,专门为普通用户设计，专为客户端设计

– multiuser,提供对客户端多个用户身份的区分支持
– sec=ntlmssp,提供NT局域网管理安全支持

  必要的时候,任何普通用户都可以通过命令切换成权限较大的用户
  来临时获取写的权限

客户端虚拟机Desktop：
[root@desktop0 ~]# vim  /etc/fstab
//172.25.0.11/devops  /mnt/pub   cifs                 defaults,user=kenji,pass=123,_netdev,multiuser,sec=ntlmssp    
    0   0
[root@desktop0 ~]# umount  /mnt/pub
[root@desktop0 ~]# mount -a

[root@desktop0 ~]# su - student
[student@desktop0 ~]$ cifscreds add -u chihiro 172.25.0.11
[student@desktop0 ~]$ ls /mnt/pub

[student@desktop0 ~]$ exit

########################################################
配置NFS共享, Linux与Linux的共享

• Network File System,网络文件系统
 – 用途:为客户机提供共享使用的文件夹
 – 协议:NFS(TCP/UDP 2049)、RPC(TCP/UDP 111)

 只读的NFS共享

服务端虚拟机server

1.所需软件包 : nfs-utils
[root@server0 ~]# rpm  - q nfs-utils
nfs-utils-1.3.0-0.el7.x86_64

[root@server0 ~]# rpm -qa | grep nfs  #显示所有已安装，进行过滤

2.NFS共享主配置文件/etc/exports
[root@server0 ~]# mkdir /nsd
[root@server0 ~]# echo haha > /nsd/abc.txt
[root@server0 ~]# ls /nsd

[root@server0 ~]# vim /etc/exports

 /nsd     *(ro)              #共享目录路径      客户端(权限)

3.重起nfs服务，设置为开机自起
[root@server0 ~]# systemctl restart nfs-server
[root@server0 ~]# systemctl enable nfs-server

客户端虚拟机Desktop
[root@desktop0 ~]# vim  /etc/fstab
172.25.0.11:/nsd   /mnt/nfs  nfs  defaults,_netdev  0  0

[root@desktop0 ~]# mkdir /mnt/nfs
[root@desktop0 ~]# mount -a
[root@desktop0 ~]# df -h

#######################################################
环境变量
    PATH：与执行命令相关
             在执行命令时，需要找到命令所对应的程序，Linux系统会到PATH变量值的所有路径去寻找，如果找到就执行，没有就不执行

[root@server0 ~]# vim /opt/hello.sh 
 #!/bin/bash
 echo hello world

[root@server0 ~]# chmod +x /opt/hello.sh
[root@server0 ~]# hello.sh     #执行失败

[root@server0 ~]# echo $PATH
[root@server0 ~]# cp /opt/hello.sh  /usr/bin

[root@server0 ~]# hello.sh      #执行成功

######################################################







55555555555555555555555555555555555555555555555555555555555




还原三台虚拟机器
[root@room9pc01 ~]# rht-vmctl reset classroom
[root@room9pc01 ~]# rht-vmctl reset server
[root@room9pc01 ~]# rht-vmctl reset desktop

######################################################
修改防火墙的默认区域为trusted

虚拟机Server
[root@server0 ~]# firewall-cmd --set-default-zone=trusted 

虚拟机desktop
[root@desktop0 ~]# firewall-cmd --set-default-zone=trusted

##############################################
 iSCSI网络磁盘

一、fdisk 划分 分区
[root@server0 ~]# lsblk 
[root@server0 ~]# fdisk /dev/vdb

    三个主分区 , 分别2个G大小        
    两个逻辑分区 , 分别1个G大小 

[root@server0 ~]# lsblk
[root@server0 ~]# ls /dev/vdb[1-6]

二、搭建iscsi共享存储

• Internet SCSI,网际SCSI接口
– 一种基于C/S架构的虚拟磁盘技术
– 服务器提供磁盘空间,客户机连接并当成本地磁盘使用
– 端口：3260

思路：example：快递打包送货

服务端：  TCL王牌大彩电  2寸-------->装箱 ------->  运输
               
客户端：   ------》箱子 ------->拆开


共享存储服务端： /dev/vdb1(nsd)-->装箱(Target 磁盘组)--》传输

共享存储客户端： 箱子(Target 磁盘组)----->拆开

使用targetcli建立配置
• ISCSI Qualified Name 名称规范
– iqn.yyyy-mm.倒序域名:自定义标识


虚拟机server0_搭建iscsi服务端：

1.安装可以提供共享存储功能的软件targetcli
[root@server0 ~]# yum  -y  install targetcli

2.进行配置共享存储
  1）建立后端存储backstore,指定后端存储是那个分区，起名

 [root@server0 ~]# targetcli 
  /> ls                      #查看所有配置
  /> backstores/block  create  nsd  /dev/vdb1
       后端存储/类型为块设备    创建       名字    实际设备路径

   2）创建箱子并起名（建立iqn磁盘组）
  /> iscsi/  create  iqn.2018-16.com.example:server0

   3）将后端存储，放入箱子中（磁盘组 绑定 后端存储 luns）
  /> iscsi/iqn.2018-16.com.example:server0/tpg1/luns 
      create   /backstores/block/nsd 

   4）设置ACL访问控制(客户端访问时声称的名字)
  
  />iscsi/iqn.2018-16.com.example:server0/tpg1/acls
      create   iqn.2018-16.com.example:test

   5）设置提供服务的IP地址
/>iscsi/iqn.2018-16.com.example:server0/tpg1/portals 
   create   172.25.0.11

/> exit   #保存并退出

3.重起服务
[root@server0 ~]# systemctl  restart  target
[root@server0 ~]# systemctl  enable  target

虚拟机desktop0_客户端：
1.安装客户端软件
  # yum repolist   #产生缓存
  # yum -y install iscsi-initiator-utils.i686 

2.修改配置文件，指定客户端声称的名字
 # vim /etc/iscsi/initiatorname.iscsi 
  InitiatorName=iqn.2018-16.com.example:test

   vim 命令模式下：按 大写的 C 删除光标之后 

3. 刷新  客户端声称的名字（客户端iqn）刷新IQN标识
[root@desktop0 ~]# systemctl restart iscsid
Warning: Unit file of iscsid.service changed on disk, 'systemctl daemon-reload' recommenqded.

[root@desktop0 ~]# systemctl daemon-reload
[root@desktop0 ~]# systemctl restart iscsid

4.寻找服务端，发现iSCSI磁盘      man iscsiadm 
   'Ctrl'+'shift'+'+' :变大
   'Ctrl'+'-'
# iscsiadm --mode discoverydb --type sendtargets --portal 172.25.0.11 --discover

172.25.0.11:3260,1 iqn.2018-16.com.example:server0

5.重起客户端iscsi服务
[root@desktop0 ~]# lsblk 
[root@desktop0 ~]# systemctl restart iscsi
[root@desktop0 ~]# lsblk 

################################################
数据库服务基础

  数据库:存放数据的仓库

 数据库中有很多的库，每一个库中有很多的表格，每一个表格有很多的记录

表格：表记录    表字段（表头）

一、安装部署MariaDB数据库           默认端口号：3306
[root@server0 ~]# yum -y install mariadb-server
n
二、启动mariadb服务
[root@server0 ~]# systemctl  restart  mariadb
[root@server0 ~]# systemctl  enable  mariadb

三、使用MariaDB数据库
  
[root@server0 ~]# mysql         #进入数据库
  > show databases;             #查看所有库
  > create  database  nsd1803;  #创建库
  > show databases;        

  > drop  database  nsd1803;    #删除库
  > show  databases;
  > exit                        #退出

[root@server0 ~]#
#################################################
设置数据库管理员的密码

  数据库管理员 和 系统管理员，不是同一个用户

  数据库管理员：root 对所有库有完全控制权限， mysql库user表
  系统管理员：root 对Linux系统有完全控制权限，/etc/passwd

 为数据库账号修改密码
– mysqladmin [-u用户名]  [-p[旧密码]]  password '新密码'

[root@server0 ~]# mysqladmin -u root  password '123'

[root@server0 ~]# mysql  -u root   -p
Enter password:

[root@server0 ~]# mysql  -uroot  -p123  #非交互式进入


 数据库主配置文件 /etc/my.cnf

了解：禁止监听,只服务于本机
[root@server0 ~]# vim /etc/my.cnf
 [mysqld]
 skip-networking    //跳过网络监听


  导入数据
 http://classroom.example.com/pub/materials/users.sql
 
 # wget 。。。。。。      #下载数据库文件
 # mysql -uroot -p123

MariaDB [(none)]> create database nsd1803;
MariaDB [(none)]> exit

 # mysql -uroot -p123 nsd1803 < users.sql
 # mysql -uroot -p123

MariaDB [nsd1803]> use nsd1803;  #进入nsd1803库
MariaDB [nsd1803]> show tables;  #查看所有表格 


  对于表格操作： 
     增(insert)     删 (delete)     改 (update)     查 (select)
 
  查 (select) :    select 表字段  from  表名；

  select  *   from  表名；

MariaDB [mysql]> use  nsd1803;    #进入nsd1803库
MariaDB [nsd1803]> show tables;  #查看所有表格

  > select  *   from   base;     #查询所有字段内容

  > select name,password  from  base; 

  > select *  from   location;

查询表结构：desc  表名;
###########################################

 数据库的授权：

  除了 root 用户,此nsd1803数据库只能被用户 lisi 查询,
  此用户的密码为123

– GRANT 权限列表  ON 数据库名.表名 TO 用户名@客户机地址
 IDENTIFIED BY '密码';

 # mysql -uroot  -p123 

 > grant select  on  nsd1803.*  to  lisi@localhost
   identified by  '123';
 
  当lisi用户从本地登陆输入密码123，将会获得nsd1803库中所有表的查询权限


验证：  # mysql -ulisi  -p123    #lisi可以登陆即可

#################################################
案例5:使用数据库查询
1. 在系统 server0 上使用数据库 nsd1803,并使用相
应的 SQL 查询以回答下列问题:
1)密码是 solicitous 的人的名字?

MariaDB [mysql]> use nsd1803;
MariaDB [nsd1803]> show tables;
 
有条件的查询：  where 
> select * from  base  where password='solicitous';
> select name from base where password='solicitous';
> select * from  base  where name='tom';
> select * from  base  where password='456';

2)有多少人的   姓名是 Barbara 同时居住在 Sunnyvale?

> select  *  from  base,location  
   where  base.name='Barbara' 
   and  location.city='Sunnyvale'  
   and  base.id=location.id;

> select  count(*)  from  base,location  
   where  base.name='Barbara' 
   and  location.city='Sunnyvale'  
   and  base.id=location.id;

> insert base values (6,'Barbara','123456');
> select  *  from  base;

> insert location values (6,'Sunnyvale');
> select  *  from  location;

#####################################################
1. 禁止空密码root用户访问 mariadb 数据库
> use mysql;
> desc user; #查看表结构

> select user,host,password from user  where password='';

> delete from user where password='';    #删除表记录

> flush  privileges;    #刷新策略

> select  user,host,password   from  user;

####################################################












????????????????????????????????????????????????????


LAMP  : Linux  Apache  MySQL/MariaDB  PHP/Python

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

6666666666666666666666666666666666666666666666666
今天的实验
web通讯，最主要的部分。所有案例都要熟记、快速的搭建独立完成
web通讯，最主要的部分。所有案例都要熟记、快速的搭建独立完成
web通讯，最主要的部分。所有案例都要熟记、快速的搭建独立完成



还原三台虚拟机器
[root@room9pc01 ~]# rht-vmctl reset classroom
[root@room9pc01 ~]# rht-vmctl reset server
[root@room9pc01 ~]# rht-vmctl reset desktop

######################################################
虚拟机Server与虚拟机desktop，修改防火墙的默认区域为trusted

#####################################################
HTTP服务基础

• 基于 B/S (Browser/Server)架构的网页服务
– 服务端提供网页
– 浏览器下载并显示网页

• Hyper Text Transfer Protocol,超文本传输协议(http)

• Hyper Text Markup Language,超文本标记语言(html)

    http 协议的端口：80

 默认网页文件目录：/var/www/html
  默认网页文件的名字: index.html

一、搭建基本的Web服务

虚拟机Server0
1.安装软件httpd

2.书写一个页面文件
# echo  '<h1>First Web'  >  /var/www/html/index.html

3.重起httpd服务，设置开机自起动


客户端访问测试：
虚拟机desktop0
# firefox 172.25.0.11
######################################################

• 提供的默认配置
– Listen: 监听地址:端口(80)
– ServerName: 本站点注册的DNS名称(空缺)
– DocumentRoot: 网页根目录(/var/www/html)
– DirectoryIndex: 起始页/首页文件名(index.html)

#####################################################
ServerName: 本站点注册的DNS名称(空缺)

 DNS服务器:classroom.example.com
   server0.example.com
   www0.example.com  
   webapp0.example.com  

虚拟机Server：
1.修改配置文件/etc/httpd/conf/httpd.conf

  ServerName server0.example.com:80    #把开头的#去掉

2.重起httpd服务

虚拟机Desktop：
 # firefox server0.example.com

#######################################################
– DocumentRoot: 网页文件的根目录(/var/www/html)

虚拟机Server0
1.修改配置文件 /etc/httpd/conf/httpd.conf

 DocumentRoot   "/var/www/myweb"

# mkdir /var/www/myweb
# echo '<h1>wo shi myweb' > /var/www/myweb/index.html
# systemctl restart httpd


虚拟机Desktop0
# firefox server0.example.com


##############################################
 网页文件的根目录  DocumentRoot  /var/www/myweb


 客户端  firefox 172.25.0.11----》服务端：/var/www/myweb

 客户端  firefox 172.25.0.11/test----》/var/www/myweb/test/index.html

                      
##################################################
虚拟Web主机
  作用：让一台Web服务器，提供多个页面

  搭建方式：
    1.基于域名的虚拟Web
    2.基于端口的虚拟Web
    3.基于IP地址的虚拟Web


############################################
基于域名的虚拟Web

 容器类型的配置
虚拟机Server0:


 <VirtualHost  IP地址:端口>
   ServerName   此站点的DNS名称
   DocumentRoot 此站点的网页根目录
 </VirtualHost>

[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf
<VirtualHost *:80>
  ServerName  www0.example.com
  DocumentRoot  /var/www/qq 
</VirtualHost>

<VirtualHost *:80>
  ServerName  webapp0.example.com
  DocumentRoot /var/www/sina
</VirtualHost>

<VirtualHost *:80>
  ServerName server0.example.com
  DocumentRoot /var/www/myweb
</VirtualHost>


[root@server0 /]# mkdir /var/www/qq  /var/www/sina
[root@server0 /]# echo '<h1>企鹅' > /var/www/qq/index.html
[root@server0 /]# echo '<h1>新浪' > /var/www/sina/index.html
[root@server0 /]# systemctl restart httpd
• 配置文件路径
– /etc/httpd/conf/httpd.conf
– /etc/httpd/conf.d/*.conf

虚拟机Server0：
1.修改调用配置文件s

[root@server0 ~]# vim  /etc/httpd/conf.d/nsd01.conf
<VirtualHost  *:80>
  ServerName   www0.example.com
  DocumentRoot  /var/www/nsd01
</VirtualHost>

:
<VirtualHost  *:80>
  ServerName   webapp0.example.com
  DocumentRoot  /var/www/nsd02
</VirtualHost>

# mkdir  /var/www/nsd01  /var/www/nsd02
# echo '<h1>wo shi nsd01' > /var/www/nsd01/index.html
# echo '<h1>wo shi nsd02' > /var/www/nsd02/index.html
2.重起httpd服务

注意：一旦使用了虚拟Web主机功能，所有的站点都必须使用虚拟Web来实现

书写配置文件，完成虚拟Web主机的配置
1. 追加写入/etc/httpd/conf.d/nsd01.conf

 <VirtualHost  *:80>
   ServerName   server0.example.com
   DocumentRoot  /var/www/myweb
 </VirtualHost>

2.重起httpd服务

#####################################################
网页内容访问
– 每个文件夹自动继承其父目录的ACL访问权限
– 除非针对子目录有明确设置


<Directory 目录的绝对路径>
    .. ..
   Require all denied|granted
   Require ip IP或网段地址 .. ..
</Directory>


  在 Web 网站 http://server0.example.com 的
 DocumentRoot 目录下创建一个名为 private 的子目录,要求如下:

  
虚拟机Server0：
1.创建目录，写入网页文件
# mkdir /var/www/myweb/private
# echo '<h1>wo shi private' > /var/www/myweb/private/index.html

2.书写新的调用配置文件/etc/httpd/conf.d/nsd02.conf

<Directory  "/var/www/myweb/private">   #针对路径
    Require ip 172.25.0.11              #仅允许172.25.0.11
</Directory>

3.重起httpd服务

虚拟机Desktop0： firefox  server0.example.com/private

虚拟机Server0： firefox  server0.example.com/private

#####################################################
案例4:使用自定Web根目录
调整 Web 站点 http://server0.example.com 的网页目录,要求如下:

1) 新建目录 /webroot,作为此站点新的网页文件根目录
 # mkdir  /webroot
 # echo   '<h1>wo  shi  Webroot'  >  /webroot/index.html

2) 修改配置文件/etc/httpd/conf.d/nsd01.conf
<VirtualHost  *:80>
  ServerName    server0.example.com
  DocumentRoot  /webroot             #修改网页文件根目录
</VirtualHost>

3) 追加写入 /etc/httpd/conf.d/nsd02.conf
<Directory  "/webroot">
    Require all granted      #允许所有
</Directory>

4）SELinux安全上下文（标识，标签）
– chcon [-R] --reference=模板目录    新目录

# ls -Zd /webroot/      #查看目录标签值

# chcon -R  --reference=/var/www    /webroot/
# ls -Zd /webroot/

5) 重起httpd服务
###################################################
部署动态网站

  静态的网站
• 服务端的原始网页 = 浏览器访问到的网页
– 由Web服务软件处理所有请求
– 文本(txt/html)、图片(jpg/png)等静态资源

  动态的网站
• 服务端的原始网页 ≠ 浏览器访问到的网页
– 由Web服务软件接受请求,动态程序转后端模块处理
– PHP网页、Python网页、JSP网页......


虚拟机Server0：
1.部署Python动态页面文件
# vim /etc/httpd/conf.d/nsd01.conf 

   查看 webapp0.example.com的DocumentRoot目录在那里

# cd /var/www/nsd02

# wget http://classroom.example.com/pub/materials/
       webinfo.wsgi

2. 方便用户访问，页面的跳转
  
 当客户端访问webapp0.example.com-》/var/www/nsd02/webinfo.wsgi

修改配置文件 /etc/httpd/conf.d/nsd01.conf

<VirtualHost *:80>
  ServerName   webapp0.example.com
  DocumentRoot  /var/www/nsd02
  Alias  /   /var/www/nsd02/webinfo.wsgi

  #当检测到客户端访问网页文件根目录时      跳转页面到webinfo.wsgi

</VirtualHost>

  重起httpd服务，客户端验证：firefox   webapp0.example.com   

3. 安装一个可以解释Python页面程序，配置解释该页面
  
[root@server0 /]# yum  -y  install  mod_wsgi
[root@server0 /]# rpm  -ql  mod_wsgi  #列出软件安装清单

 Unix时间戳：从1970-1-1  0:0:0算起，到达当前时间经过的秒数
[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf
<VirtualHost *:80>
  ServerName   webapp0.example.com
  DocumentRoot  /var/www/nsd02
  WsgiScriptAlias /  /var/www/nsd02/webinfo.wsgi

</VirtualHost>

[root@server0 /]# systemctl  restart  httpd

4.修改端口为8909，修改配置文件 /etc/httpd/conf.d/nsd01.conf

 Listen  8909
 <VirtualHost   *:8909>
   ServerName   webapp0.example.com
   DocumentRoot   /var/www/nsd02
   WsgiScriptAlias  /  /var/www/nsd02/webinfo.wsgi
 </VirtualHost>

5. SELinux 非默认端口的开放  

 # semanage port -l | grep http
 # semanage port -a -t http_port_t  -p tcp 8909
    -a添加  -t类型  -p协议

6.重起httpd服务
客户端访问测试 # firefox  webapp0.example.com:8909
######################################################




777777777777777777777777777777777777777777777777777







还原三台虚拟机器
[root@room9pc01 ~]# rht-vmctl reset classroom
[root@room9pc01 ~]# rht-vmctl reset server
[root@room9pc01 ~]# rht-vmctl reset desktop

#################################################
两台虚拟机防火墙默认区域设置为trusted

搭建虚拟Web
虚拟机Server0：
1.安装httpd软件
2.书写网页文件/var/www/html/index.html
3.建立调用配置文件/etc/httpd/conf.d/nsd01.conf
   <VirtualHost  *:80>
         ServerName    server0.example.com
         DocumentRoot  /var/www/html/
   </VirtualHost>

4.重起httpd服务

虚拟机Desktop0:
访问测试 firefox  server0.example.com

#######################################################
 安全Web服务器  

   https协议： 443 端口

虚拟Server0：
       
1.部署 网站证书（营业执照）
# cd  /etc/pki/tls/certs/

# wget http://classroom.example.com/pub/tls/certs/
            server0.crt

# ls

2.部署  根证书（公安局信息，证书颁发机构的信息）
# cd  /etc/pki/tls/certs/

# wget  http://classroom.example.com/pub/example-ca.crt

# ls

3.部署 私钥 （用于解密）
# cd /etc/pki/tls/private/

# wget  http://classroom.example.com/pub/tls/private/
        server0.key

# ls

4.安装可以支持加密Web的软件
[root@server0 /]# yum -y install mod_ssl

[root@server0 /]# rpm -q mod_ssl

5.修改配置文件
[root@server0 /]# vim  /etc/httpd/conf.d/ssl.conf
      末行模式下  :set  nu   #添加行号,显示全文行号/

 59 DocumentRoot  "/var/www/html"
 60 ServerName    server0.example.com:443

#指定网站证书
100 SSLCertificateFile  /etc/pki/tls/certs/server0.crt

#指定密钥
107 SSLCertificateKeyFile /etc/pki/tls/private/server0.key

#指定根证书
122 SSLCACertificateFile /etc/pki/tls/certs/example-ca.crt

6.重起服务
[root@server0 /]# systemctl  restart  httpd

####################################################

虚拟机Desktop0：
[root@desktop0 ~]# firefox  https://server0.example.com


####################################################
parted(分区工具)
 要支持大容量（18EB）,需改用  gpt 分区模式可以有128个主分区
                      1EB=1000PB;1PB=1000TB
[root@server0 /]# lsblk 
[root@server0 /]# parted /dev/vdb

(parted) mktable gpt  #指定分区的模式
(parted) print        #输出所有分区信息
(parted) mkpart       #划分新的分区
 分区名称？  []? haha          #分区的名字
 文件系统类型？  [ext2]? ext4   #分区的文件系统类型，不起实际作用
 起始点？ 0                                  #起始点 ， 第一个分区起始点为0
 结束点？ 4G                 #结束点
 警告: The resulting partition is not properly aligned
 for best performance.
 忽略/Ignore/放弃/Cancel? Ignore   #忽略

(parted) print        #输出所有分区信息
(parted) unit GB      #设置显示单位
(parted) print        #输出所有分区信息
(parted) quit      #退出



[root@server0 /]# parted /dev/vdb
(parted) print 
(parted) unit GB      #设置单位
(parted) print 
(parted) mkpart       #划分新的分区
 分区名称？  []? haha          #分区的名字
 文件系统类型？  [ext2]? ext4   #分区的文件系统类型，不起实际作用
 起始点？ 4G                 #起始点 ， 上一个分区的结束
 结束点？ 8G                 #结束点

(parted) print
(parted) quit

[root@server0 /]# ls /dev/vdb[1-2]

###################################################
  交换空间: 缓解真实物理内存的压力

  由硬盘的空间来组成

 – 交换分区:以空闲分区充当的交换空间

1.格式化交换分区
[root@server0 /]# mkswap /dev/vdb1
[root@server0 /]# mkswap /dev/vdb2

2.启用交换分区/dev/vdb1
[root@server0 /]# swapon  /dev/vdb1    #启用
[root@server0 /]# swapon  -s           #查看交换空间的成员
[root@server0 /]# swapon  /dev/vdb2
[root@server0 /]# swapon  -s

3.停用交换分区
[root@server0 /]# swapoff  /dev/vdb1   #停用
[root@server0 /]# swapon  -s

4.实现开机自动启用交换分区/dev/vdb1
[root@server0 /]# vim  /etc/fstab
/dev/vdb1  swap   swap  defaults 0 0
/dev/vdb2  swap   swap  defaults 0 0

[root@server0 /]# swapoff /dev/vdb1
[root@server0 /]# swapoff /dev/vdb2
[root@server0 /]# swapon -s

[root@server0 /]# swapon  -a   #自动检测/etc/fstab文件swap分区
[root@server0 /]# swapon  -s

#######################################################
 基础邮件服务

   SMTP:用户发邮件协议  25
   pop3:用户收邮件协议  110

• 电子邮件服务器的基本功能
  – 为用户提供电子邮箱存储空间(用户名@邮件域名)
  – 处理用户发出的邮件 —— 传递给收件服务器
  – 处理用户收到的邮件 —— 投递到邮箱


DNS服务器：classroom.example.com以server0.example.com为例

搭建基本邮件服务
虚拟机Server0：

1. 安装 postfix 提供邮件功能的软件 
[root@server0 /]# yum  -y  install  postfix
[root@server0 /]# rpm  -q  postfix

2.修改配置文件/etc/postfix/main.cf 
[root@server0 /]# vim  /etc/postfix/main.cf 
  vim末行模式     ：set  nu

99  myorigin = server0.example.com    #默认补全的域名后缀
116 inet_interfaces = all             #允许本机所有网卡
164 mydestination = server0.example.com  #判断为本域邮件

3.重起postfix服务  
[root@server0 /]# systemctl restart postfix

##################################################
使用mail命令发信/收信
• mail 发信操作
– mail  -s  '邮件标题'     -r  发件人     收件人

• mail 收信操作
– mail  [-u 用户名]

1.创建用户
[root@server0 /]# useradd zhangsan
[root@server0 /]# useradd lisi

2.收发邮件, -s 邮件的主题   -r 收件人
[root@server0 /]# mail -s  '哈哈'    -r  zhangsan  lisi
AAAAAAAAAAAAA
BBBBBBBBBBBBB
.
EOT
[root@server0 /]# mail -u lisi
Heirloom Mail version 12.5 7/5/10.  Type ? for help.
"/var/mail/lisi": 1 message 1 new
>N  1 zhangsan@server0.exa  Wed Apr 18 14:29  19/631   
& 1

####################################################
  # echo xixi  |  mail -s 'xixi' -r zhangsan   lisi


jiangtengfei@sina.com
申请一个邮箱，以做简历、应聘
````````````@163.com



