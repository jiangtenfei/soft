真机：还原三台虚拟机
[root@room9pc13 ~]# rht-vmctl reset classroom  
[root@room9pc13 ~]# rht-vmctl reset server
[root@room9pc13 ~]# rht-vmctl reset desktop   

####################################################
防火墙：
虚拟机server0
[root@server0 ~]# firewall-cmd --set-default-zone=trusted 

虚拟机desktop0
[root@desktop0 ~]# firewall-cmd --set-default-zone=trusted 

#####################################################
安全Web服务,实现https(安全的超文本传输协议)加密传输

– 公钥:主要用来加密数据
– 私钥:主要用来解密数据(与相应的公钥匹配)
– 数字证书:证明拥有者的合法性/权威性(单位名称、:
有效期、公钥、颁发机构及签名、......)
– Certificate Authority,数字证书授权中心:负责证书
的申请/审核/颁发/鉴定/撤销等管理工作

搭建虚拟Web主机
1.安装软件包httpd

2.修改配置文件
# vim /etc/httpd/conf.d/nsd01.conf
 <VirtualHost  *:80>
   ServerName www0.example.com
   DocumentRoot /var/www/html
 </VirtualHost>

# echo '<h1>NSD test' > /var/www/html/index.html
# systemctl  restart  httpd

#####################################################
部署安全的Web服务器,端口默认:443

1.安装软件包,支持安全Web服务器
[root@server0 ~]# yum -y install  mod_ssl

2.部署网站证书(营业执照)
# cd /etc/pki/CA/certs/
# wget  http://classroom.example.com/pub/tls/certs/server0.crt

# ls

3.部署根证书(公安局信息)
# cd /etc/pki/CA/certs/
# wget  http://classroom.example.com/pub/example-ca.crt

# ls

4.部署解密的私钥
# cd /etc/pki/CA/private/
# wget http://classroom.example.com/pub/tls/private/server0.key

# ls

5.修改配置文件/etc/httpd/conf.d/ssl.conf
# vim /etc/httpd/conf.d/ssl.conf
 在末行模式下  :set  nu   #显示全文行号
    
 59  DocumentRoot "/var/www/html"
 60  ServerName www0.example.com:443

指定网站证书
100 SSLCertificateFile /etc/pki/CA/certs/server0.crt

指定私钥

107 SSLCertificateKeyFile /etc/pki/CA/private/server0.key

指定根证书
122 SSLCACertificateFile /etc/pki/CA/certs/example-ca.crt

6.重起httpd服务
[root@server0 /]# systemctl  restart  httpd

7.验证:
[root@server0 /]# firefox https://www0.example.com  
  网站地址处有一个小锁，由https开头。证明已经成功了
#######################################################
基础邮件服务
• 电子邮件服务器的基本功能
– 为用户提供电子邮箱存储空间(用户名@邮件域名)
– 处理用户发出的邮件 —— 传递给收件服务器
– 处理用户收到的邮件 —— 投递到邮箱          
                                                                                       	
  DNS服务器: classroom.example.com

            server0.example.com

虚拟机Server0:部署邮件服务

1.创建两个邮箱帐号
[root@server0 /]# useradd yg
[root@server0 /]# useradd xln

2.安装邮件功能的软件
[root@server0 /]# rpm -q postfix

3.修改配置文件/etc/postfix/main.cf

 99  myorigin = server0.example.com   #默认补全邮箱域名后缀
 116 inet_interfaces = all            #允许本机所有网络接口
 164 mydestination = server0.example.com 
                                               #根据本字段值,判断为本域邮件

4.重起服务
[root@server0 /]# systemctl restart postfix

###################################################
收发邮件:

• mail 发信操作
– mail -s '邮件主题'     -r  发件人      收件人

• mail 收信操作
– mail [-u 用户名]

[root@server0 /]# mail -s 'test1'   -r  yg   xln
AAAAAAAAAAAA
hahaxixi
.                  #只有一个点,提交

[root@server0 /]# mail -u xln
Heirloom Mail version 12.5 7/5/10.  Type ? for help.
"/var/mail/xln": 2 messages
>   1 yg@server0.example.c  Fri Jun 15 14:30  19/606   
 
&  1         #输入编号

& quit   #退出

[root@server0 /]# echo haha | mail -s 'test01' -r yg  xln

#######################################################
parted分区命令,可以划分GPT分区模式

   GPT分区模式:    128个主分区       18EB容量

                1EB=1000PB
                1PB=1000TB                        
     

[root@server0 /]# parted /dev/vdb
(parted) mktable  gpt      #指定分区模式  (不能随便使用，会全部干掉
                                                  之前的分区挂载等等)
(parted) print             #输出分区表信息
(parted) mkpart            #划分新的分区
分区名称？  []? haha          #分区名子,随便起
文件系统类型？  [ext2]? ext4   #指定分区文件系统类型,不起作用
起始点？ 0           
结束点？ 2G
忽略/Ignore/放弃/Cancel? Ignore    #忽略
(parted) unit GB                 #使用GB作为显示单位
(parted) mkpart 
分区名称？  []? haha
文件系统类型？  [ext2]? ext4
起始点？ 2G          
结束点？ 4G 
(parted) quit                     #退出
[root@server0 /]#

####################################################
交换空间,虚拟内存

– 当物理内存不够用时,使用磁盘空间来模拟内存
– 在一定程度上缓解内存不足的问题
– 交换分区:以空闲分区充当的交换空间


1.格式化, 交换文件系统
[root@server0 ~]# mkswap  /dev/vdb1  

2.启用交换分区
[root@server0 ~]# swapon  /dev/vdb1  

3.查看交换空间组成的成员
[root@server0 ~]# swapon -s

[root@server0 ~]# mkswap   /dev/vdb2  
[root@server0 ~]# swapon   /dev/vdb2
[root@server0 ~]# swapon  -s
[root@server0 ~]# swapoff  /dev/vdb2     #停用
[root@server0 ~]# swapon  -s

5.开机自动启用交换分区
[root@server0 ~]# vim /etc/fstab 
/dev/vdb1  swap  swap  defaults  0 0
/dev/vdb2  swap  swap  defaults  0 0
设备路径     挂载点  类型    参数    备份标记  检测顺序
[root@server0 ~]# swapoff /dev/vdb1
[root@server0 ~]# swapoff /dev/vdb2
[root@server0 ~]# swapon -s
[root@server0 ~]# swapon  -a   #专用于检测交换分区命令
[root@server0 ~]# swapon -s

###################################################
配置NFS共享, Linux与Linux之间的共享
NFS共享概述
• Network File System,网络文件系统
– 用途:为客户机提供共享使用的文件夹
– 协议:NFS(TCP/UDP 2049)  RPC(TCP/UDP 111)

• 所需软件包:nfs-utils
• 系统服务:nfs-server

搭建基本的NFS共享
虚拟机server0
1.安装nfs-utils包
[root@server0 ~]# yum -y install nfs-utils

2.修改配置文件/etc/exports
[root@server0 ~]# mkdir /test
[root@server0 ~]# echo haha > /test/1.txt
[root@server0 ~]# vim /etc/exports
/test     *(ro)

3.重起nfs-server服务
[root@server0 ~]# systemctl restart nfs-server

虚拟机desktop0
客户端访问:
1.查看服务端NFS共享
[root@desktop0 ~]# showmount -e 172.25.0.11

2.挂载访问
[root@desktop0 ~]# mkdir /mnt/nfs
[root@desktop0 ~]# mount 172.25.0.11:/test  /mnt/nfs
[root@desktop0 ~]# df  -h

3.实现开机自动挂载
[root@desktop0 ~]# vim /etc/fstab 
172.25.0.11:/test  /mnt/nfs  nfs defaults,_netdev 0 0

[root@desktop0 ~]# umount /mnt/nfs
[root@desktop0 ~]# df -h
[root@desktop0 ~]# mount -a
[root@desktop0 ~]# df -h
 































































































































































































































































































